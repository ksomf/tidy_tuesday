---
title: "Tidy Tuesday 2023 Week 29: Chat GPT Detectors"
format: html
---

```{r setup}
library(tidyverse)
library(GGally)
library(ggdist)
library(ggtext)
library(inspectdf)
library(patchwork)
library(showtext)
library(khroma)

# Based on https://github.com/z3tt/TidyTuesday/blob/main/R/2020_31_PalmerPenguins.Rmd
font_family <- 'Inter' # Alt: 'Lato', 'EB Garamond'; sysfonts::font.files() %>% pull(family) %>% unique()
if(nrow(sysfonts::font_files() %>% filter(family == font_family))){
	font_add( font_family
	        , regular    = paste0( font_family, '-Regular.otf'    )
	        , bold       = paste0( font_family, '-Bold.otf'       )
	        , italic     = paste0( font_family, '-Italic.otf'     )
	        , bolditalic = paste0( font_family, '-BoldItalic.otf' ) )
}else{
	font_add_google(font_family) #Note(Kim): Inter has no italic version
}
showtext_opts(dpi=300)
showtext_auto()

theme_set(theme_minimal( base_size = 15, base_family = font_family ))
theme_update( panel.grid.minor = element_blank()
            ,  text = element_text(family=font_family)
            ,  plot.title    = element_text( hjust=0, size=21, colour='black' , face='bold'       , margin=margin( t=0 , r=5, b=0, l=0 )                  )
            ,  plot.subtitle = element_text( hjust=0, size=14, colour='grey60', face='bold.italic', margin=margin( t=0 , r=5, b=10, l=0 )                  )
            ,  plot.caption  = element_text( hjust=1, size=10, colour='black' , face='plain'      , margin=margin( t=10, r=0, b=0 , l=0 ), lineheight=2.05 )
            ,  plot.title.position   = 'plot'
            ,  plot.caption.position = 'plot'
            ,  axis.title = element_text(family=font_family)
            ,  plot.margin = margin(rep( 10, 4 )) )
```



## Data Wrangling

```{r loading}
detectors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-07-18/detectors.csv')
```

```{r eda}
inspect_na(detectors)
inspect_cor(detectors)
inspect_imb(detectors)
inspect_num(detectors)
inspect_cat(detectors)

detectors$.pred_class %>% table
detectors$model %>% table
detectors$detector %>% table
detectors %>% 
	group_by(document_id) %>% 
	summarise(n=n()) %>% 
	ggplot(aes(x=n)) +
	geom_histogram(binwidth=1)
detectors %>% 
	group_by(document_id) %>% 
	filter(n() > 10) %>% 
	arrange(document_id, detector)
```


```{r wrangling}
df <- detectors %>% 
	mutate( kind        = fct_inorder(kind)
	      , .pred_class = fct_inorder(.pred_class)
	      , detector    = fct_infreq(detector) ) %>% 
	distinct() %>% 
	rename( pred_ai=.pred_AI, pred_class=.pred_class ) %>% 
	mutate( class=case_when(
	    kind == 'Human' & pred_class == 'Human' ~ 'True Positive'
	,   kind == 'AI'    & pred_class == 'Human' ~ 'False Negative'
	,   kind == 'Human' & pred_class == 'AI'    ~ 'False Positive'
	,   kind == 'AI'    & pred_class == 'AI'    ~ 'True Negative'
	))

df_prop <- df %>% 
	count( detector, class ) %>% 
	group_by(detector) %>% 
	mutate(prop = n / sum(n)) %>% 
	mutate(prop_label=paste0(round(prop*100, 1), '%')) %>% 
	mutate(prop_true= ifelse(class %in% c('True Positive', 'True Negative'), prop, 0)) %>% 
	mutate(prop_true=sum(prop_true))


df_contrast <- df %>% 
	filter( native %in% c('Yes', 'No') ) %>% 
	count(detector, class, native) %>% 
	arrange(native) %>% 
	group_by(detector, native) %>% 
	mutate(prop = n / sum(n)) %>% 
	filter(class == 'True Positive') %>% 
	select(-class, -n) %>% 
	ungroup() %>% 
	mutate(native=ifelse( native == 'Yes', 'native', 'non_native' )) %>% 
	pivot_wider(id_cols=detector, names_from=native, values_from=prop) %>% 
	mutate(contrast=round((non_native - native)*100, 1))

order_combined <- fct_reorder( df_prop    $detector, df_prop$prop_true                          , .desc=F ) %>% levels()
order_drop     <- fct_reorder( df_contrast$detector, df_contrast$contrast                       , .desc=T ) %>% levels()
order_median   <- fct_reorder( df_contrast$detector, (df_contrast$non_native+df_contrast$native), .desc=T ) %>% levels()

detector_order <- order_median

df         $detector <- fct(as.character(df         $detector), levels=detector_order)
df_prop    $detector <- fct(as.character(df_prop    $detector), levels=detector_order)
df_contrast$detector <- fct(as.character(df_contrast$detector), levels=detector_order)

bestworst_detector <- last(order_combined)

df %>% 
	group_by(document_id) %>% 
	filter(n() > 7) %>% 
	arrange(document_id, detector)
```

## Plot
```{r}
colour_scheme1 <- khroma::colour('vibrant')(7)
colour_map <- c( 'True Positive'  = colour_scheme1[['blue']]
               , 'True Negative'  = colour_scheme1[['cyan']]
               , 'False Positive' = colour_scheme1[['red']]
               , 'False Negative' = colour_scheme1[['orange']]
               , 'Non Native'     = colour_scheme1[['magenta']]
               , 'Native'         = colour_scheme1[['teal']] )

p_contrast <- df_contrast %>% 
	ggplot(aes(x=native, xend=non_native, y=detector, yend=detector)) +
	geom_segment(alpha=.5) +
	geom_point(aes(x=native    , colour='Native'    ), size=3) +
	geom_point(aes(x=non_native, colour='Non Native'), size=3) +
	scale_color_manual(values=colour_map) +
	scale_x_continuous(limits=c(0,1), labels=scales::percent) +
	theme( axis.title.y=element_blank(), axis.text.y=element_blank() ) +
	theme(legend.position='bottom') +
	coord_cartesian(clip='off') +
	guides(colour=guide_legend( title=element_blank(), reverse=T )) +
	labs( subtitle='True Negatives Rates for Non-native and Native Speakers'
	    , x='True Negative vs False Positive Rate (%)'  )

p_prop <- df_prop_negative %>% 
	ggplot(aes(x=detector, y=prop, label=prop_label, fill=class)) +
	geom_bar(stat='identity') +
	geom_text(position=position_stack(vjust=0.5), colour='white') +
	scale_fill_manual(values=colour_map) +
	coord_flip(clip='off') +
	theme( axis.title.x=element_blank(), axis.text.x=element_blank(), panel.grid.major.x=element_blank() ) +
	theme( axis.title.y=element_blank(), axis.text.y=element_text(family=font_family, hjust=0.5, face='bold', margin=margin(r=15)) ) +
	theme( legend.position='bottom', plot.title.position='panel' ) +
	guides(fill=guide_legend( title=element_blank(), reverse=T )) +
	#guides(fill=guide_legend( nrow=1, byrow=T, title=element_blank(), reverse=T, label.theme=element_text(family=font_family) ))
	#theme(plot.background=element_rect(fill='white')) +
	labs( subtitle='AI Detection Rates (%)' )
		
(p_contrast | p_prop) +
	plot_annotation( title   = 'False AI Identificatin of Non-native English Speakers'
	               , subtitle = glue::glue('The best overall AI detector: {bestworst_detector} has the worst drop in performance with non-native speakers.')
	               , caption = '{detectors} | #TidyTuesday | github.com/ksomf' ) +
	theme(plot.background=element_rect(fill='white', colour=NA)) +
	theme(plot.caption=element_text( hjust=0 ) )
ggsave( '2023_wk29.png', width=1.5*14*2/3, height=9*2/3 )
```

